#!/usr/bin/env bash

shopt -s extglob

exampleFile="example.hs"
testSuffix="_test.hs"
srcDir="src"
testDir="test"
programName=`basename "$0"`

depsFinder="`dirname ${BASH_SOURCE}`/dependencies"

generateStackYaml () {
    echo "resolver: ${stackResolver}"
}

generatePackageYaml () {
    local exercise=`basename ${PWD}`
    local commonDeps=`${depsFinder} --examples-and-tests ${exercise}`
    local exampleDeps=`${depsFinder} --only-in-examples ${exercise}`
    local testDeps=`${depsFinder} --only-in-tests ${exercise}`

    echo "name: $exercise"
    echo ""
    echo "dependencies:"

    for dependency in ${commonDeps}; do
      echo "  - ${dependency}"
    done

    echo ""
    echo "library:"
    echo "  source-dirs: ${srcDir}"
    echo "  dependencies:"

    for dependency in ${exampleDeps}; do
      echo "    - ${dependency}"
    done

    echo ""
    echo "tests:"
    echo "  test:"
    echo "    main: ${exercise}${testSuffix}"
    echo "    source-dirs: ${testDir}"
    echo "    dependencies:"
    echo "      - ${exercise}"

    for dependency in ${testDeps}; do
      echo "      - ${dependency}"
    done
}

stackalizeProject () {
    local exercise=`basename ${PWD}`
    local module=`grep "^module" ${exampleFile} | cut -d " " -f 2`
    if [ ! -e "${exampleFile}"           ] ||
       [ ! -e "${exercise}${testSuffix}" ] ; then
       echo "$0: Cannot stackalize. Exercise files not found."
       exit 1
    else
        mkdir .extraFiles && # This first move all files to .extraFiles
        mv * .extraFiles  && # to avoid additional files breaking the build.
        mkdir ${srcDir}   && # After that we move again just the example
        mkdir ${testDir}  && # and the test to their destination folders.
        mv .extraFiles/${exampleFile} ${srcDir}/${module}.hs &&
        mv .extraFiles/${exercise}${testSuffix} ${testDir}   &&
        (generateStackYaml   > stack.yaml)                   &&
        (generatePackageYaml > package.yaml)
    fi
}

stackalizeUndoProject () {
    local sourceFiles=`find ${srcDir} -type f`
    local exercise=`basename ${PWD}`
    if [ -z $sourceFiles ] ||
       [ ! -e "${testDir}/${exercise}${testSuffix}" ] ; then
       echo "$0: Cannot unstackalize. Exercise files not found."
       exit 1;
    else
        local module=$(grep "^module" ${sourceFiles} | cut -d " " -f 2)
        local extra=`find .extraFiles -mindepth 1 -maxdepth 1`
        mv $srcDir/${module}.hs ./${exampleFile}                   &&
        mv $testDir/${exercise}$testSuffix .                       &&
        if [ ! -z "$extra" ]; then
          mv ${extra} .
        fi
        rm -rf .extraFiles $srcDir $testDir $exercise.cabal package.yaml stack.yaml
    fi
}

stackalize () {
    for dir in "$@"; do
      (
        cd $dir
        stackalizeProject
      )
    done
}

stackalizeUndo () {
    for dir in "$@"; do
      (
        cd $dir
        stackalizeUndoProject
      )
    done
}


stackResolver=""
stackUndo="NO"

eval set -- `getopt -o "a" --long resolver:,undo -n ${programName} -- "$@"`


while true ; do
    case "$1" in
        --undo    ) stackUndo="YES"   ; shift 1;;
        --resolver) stackResolver="$2"; shift 2;;
        --        ) shift; break  ;;
        *) echo "$0: Unexpected error using getopt."; exit 1;;
    esac
done

if [ $# -eq 0 ]; then
  folders="."
else
  folders="$@"
fi

if [ "${stackUndo}" == "YES" ]; then
  stackalizeUndo ${folders}
elif [ "${stackResolver}" == "" ]; then
  echo "$0: No resolver specified."
  exit 1
else
  stackalize ${folders}
fi

